{
  "address": "0x674BE44B3C525c20A15b1f6B54753b46f09a2C78",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "soldTokens",
          "type": "uint256"
        }
      ],
      "name": "BuyTokenByETHWithPermit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "offerToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "soldTokens",
          "type": "uint256"
        }
      ],
      "name": "BuyTokenByTokenWithPermit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "soldToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fundingWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "offeredCurrency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offeredCurrencyDecimal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offeredCurrencyRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closeTime",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolStatsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SoldTokenRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_oldRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_newRoot",
          "type": "bytes32"
        }
      ],
      "name": "newRootSettled",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "buyTokenByETHWithPermission",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_offerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "buyTokenByTokenWithPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_soldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_offerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundingWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_openTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offeredCurrencyRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offeredCurrencyDecimal",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isFinalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_offerToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "newOfferedCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "newRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "offeredCurrencies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "refundRemainingTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_closeTime",
          "type": "uint256"
        }
      ],
      "name": "setCloseTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_openTime",
          "type": "uint256"
        }
      ],
      "name": "setOpenTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soldToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPurchased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3cd358c86bf4295b42fdfa82c008ac05cea697d288983c841094e195b624d35d",
  "receipt": {
    "to": null,
    "from": "0x9ef6eBF5A3E71d7f89eAdb94c8EA4293E64E4B4e",
    "contractAddress": "0x674BE44B3C525c20A15b1f6B54753b46f09a2C78",
    "transactionIndex": 3,
    "gasUsed": "2100233",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfabfaf78037a116a65e99944eb9c9ecb4537b16071f1c0b4e9bb61f868ad31ed",
    "transactionHash": "0x3cd358c86bf4295b42fdfa82c008ac05cea697d288983c841094e195b624d35d",
    "logs": [],
    "blockNumber": 9267672,
    "cumulativeGasUsed": "6588308",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "66391dfbaa42928858942b80e2975d5f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldTokens\",\"type\":\"uint256\"}],\"name\":\"BuyTokenByETHWithPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offerToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldTokens\",\"type\":\"uint256\"}],\"name\":\"BuyTokenByTokenWithPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"soldToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offeredCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeredCurrencyDecimal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeredCurrencyRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closeTime\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolStatsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SoldTokenRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_oldRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"newRootSettled\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyTokenByETHWithPermission\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyTokenByTokenWithPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_soldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_offerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offeredCurrencyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offeredCurrencyDecimal\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"newOfferedCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"newRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offeredCurrencies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refundRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_closeTime\",\"type\":\"uint256\"}],\"name\":\"setCloseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_openTime\",\"type\":\"uint256\"}],\"name\":\"setOpenTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCloseTime(uint256)\":{\"params\":{\"_closeTime\":\"Value in uint256 determine when we stop user to by tokens\"}},\"setOpenTime(uint256)\":{\"params\":{\"_openTime\":\"Value in uint256 determine when we allow user to by tokens\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setCloseTime(uint256)\":{\"notice\":\"Owner can set the close time (time in seconds). User can buy before close time.\"},\"setOpenTime(uint256)\":{\"notice\":\"Owner can set the open time (time in seconds). User can buy after open time.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/presale-pool/PresalePool.sol\":\"PresalePool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x07411372282794f7ecde69a1065e5d20441abe7c9f8861437b4d45c9a4712fa6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x30f3940c119b4d93578bac394f43ee9b0b8465ea1e60b316244183be2983a5ed\",\"license\":\"MIT\"},\"contracts/extensions/PresaleWhitelist.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\n\\nabstract contract PresaleWhitelist is EIP712Upgradeable {\\n    bytes32 public root;\\n\\n    event newRootSettled(bytes32 _oldRoot, bytes32 _newRoot);\\n\\n    function initialize(bytes32 _root, string memory _name, string memory _version) internal {\\n        __EIP712_init(_name, _version);\\n        root = _root;\\n    }\\n\\n    function _newRoot(bytes32 _root) internal {\\n        require(_root != root, \\\"PresaleWhitelist::New Merkle Root is the same!\\\");\\n        emit newRootSettled(root, _root);\\n        root = _root;\\n    }\\n\\n    function _leaf(address _candidate, uint _maxAmount) internal pure returns(bytes32 hash) {\\n        hash = keccak256(abi.encodePacked(_candidate, _maxAmount));\\n    }\\n\\n    function _verify(bytes32[] memory proof, bytes32 leaf) internal view returns(bool) {\\n        return MerkleProof.verify(proof, root, leaf);\\n    }\\n\\n    function _verifyWhitelist(bytes32[] memory proof, address _candidate, uint _maxAmount) internal view returns(bool) {\\n        return _verify(proof, _leaf(_candidate, _maxAmount));\\n    }\\n}\",\"keccak256\":\"0xd713a5f9252648c54d240728def3034423b6e63ee60e9221c007dafc802064f2\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\",\"keccak256\":\"0x6c5e818daa61fc1b440ac7a1162f85eed19af7c17b06b90292b038e5b63cbe2c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/presale-pool/PresalePool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"../extensions/PresaleWhitelist.sol\\\";\\nimport \\\"../tokens/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\n\\ncontract PresalePool is PresaleWhitelist, ReentrancyGuardUpgradeable, PausableUpgradeable, OwnableUpgradeable {\\n    struct OfferedCurrency {\\n        uint rate;\\n        uint decimals;\\n    }\\n    \\n    IERC20 public soldToken;\\n    address public fundingWallet;\\n    address public factory;\\n\\n    uint public openTime;\\n    uint public closeTime;\\n    uint public totalSold;\\n    uint public totalRaised;\\n\\n    mapping(address => OfferedCurrency) public offeredCurrencies;\\n    mapping(address => uint) public userPurchased;\\n\\n    event PoolCreated(\\n        bytes32 root,\\n        address factory,\\n        address soldToken,\\n        address indexed fundingWallet,\\n        address indexed owner,\\n        address indexed offeredCurrency,\\n        uint offeredCurrencyDecimal,\\n        uint offeredCurrencyRate,\\n        uint openTime,\\n        uint closeTime\\n    );\\n\\n    event BuyTokenByTokenWithPermit(\\n        address indexed offerToken,\\n        address indexed beneficiary,\\n        uint amount,\\n        uint maxAmount,\\n        uint soldTokens\\n    );\\n\\n    event BuyTokenByETHWithPermit(\\n        address indexed beneficiary,\\n        uint amount,\\n        uint maxAmount,\\n        uint soldTokens\\n    );\\n\\n    event SoldTokenRefunded(\\n        address indexed wallet,\\n        uint amount\\n    );\\n\\n    event PoolStatsChanged();\\n\\n    fallback() external {\\n        revert();\\n    }\\n\\n    /**\\n     * @dev fallback function\\n     */\\n    receive() external payable {\\n        revert();\\n    }\\n\\n    function initialize(\\n        bytes32 _root,\\n        address _soldToken,\\n        address _offerToken,\\n        address _fundingWallet,\\n        uint _openTime,\\n        uint _duration,\\n        uint _offeredCurrencyRate,\\n        uint _offeredCurrencyDecimal\\n    ) external initializer {\\n        super.initialize(_root, \\\"Presale Pool\\\", \\\"1.0.0\\\");\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        factory = msg.sender;        \\n        soldToken = IERC20(_soldToken);\\n        fundingWallet = _fundingWallet;\\n        openTime = _openTime;\\n        closeTime = openTime + _duration;\\n        offeredCurrencies[_offerToken] = OfferedCurrency(_offeredCurrencyRate, _offeredCurrencyDecimal);\\n\\n        transferOwnership(tx.origin);\\n\\n        emit PoolCreated(\\n            _root,\\n            factory, address(_soldToken), \\n            fundingWallet, owner(), \\n            _offerToken, \\n            _offeredCurrencyDecimal, \\n            _offeredCurrencyRate,\\n            openTime,\\n            closeTime\\n        );\\n    }\\n\\n    function newRoot(bytes32 _root) external onlyOwner {\\n        _newRoot(_root);\\n        emit PoolStatsChanged();\\n    }\\n\\n    function newOfferedCurrency(address _offerToken, uint _rate, uint _decimals) external onlyOwner {\\n        offeredCurrencies[_offerToken].rate = _rate;\\n        offeredCurrencies[_offerToken].decimals = _decimals;\\n        emit PoolStatsChanged();\\n    }\\n\\n    /**\\n     * @notice Owner can set the close time (time in seconds). User can buy before close time.\\n     * @param _closeTime Value in uint256 determine when we stop user to by tokens\\n     */\\n    function setCloseTime(uint256 _closeTime) external onlyOwner {\\n        require(_closeTime >= block.timestamp, \\\"PresalePool::INVALID_TIME\\\");\\n        closeTime = _closeTime;\\n        emit PoolStatsChanged();\\n    }\\n\\n    /**\\n     * @notice Owner can set the open time (time in seconds). User can buy after open time.\\n     * @param _openTime Value in uint256 determine when we allow user to by tokens\\n     */\\n    function setOpenTime(uint256 _openTime) external onlyOwner {\\n        openTime = _openTime;\\n        emit PoolStatsChanged();\\n    }\\n\\n    function buyTokenByTokenWithPermission(\\n        address _offerToken,\\n        address _beneficiary,\\n        uint _amount,\\n        uint _maxAmount,\\n        bytes32[] memory proof\\n    ) external whenNotPaused nonReentrant {\\n        OfferedCurrency memory offeredCurrency = offeredCurrencies[_offerToken];\\n        require(offeredCurrency.rate != 0, \\\"PresalePool::Offer currency rate is invalid!\\\");\\n        require(_validPurchase(), \\\"PresalePool::Pool is ended!\\\");\\n        require(_verifyWhitelist(proof, msg.sender, _maxAmount), \\\"PresalePool::Not in whitelist!\\\");\\n        require(_verifyAllowance(msg.sender, _offerToken, _amount), \\\"PresalePool::Allowance for offered token unreached!\\\");\\n\\n        _preValidatePurchase(_beneficiary, _amount);\\n\\n        uint soldTokenAmount = _getSoldTokensByOfferedCurrency(_offerToken, _amount);\\n        require(soldTokenAmount + userPurchased[msg.sender] <= _maxAmount, \\\"PresalePool::Purchase amount exceeds max amount!\\\");\\n\\n        _forwardFundTransfer(_offerToken, _amount);\\n        _deliverTokens(_beneficiary, soldTokenAmount);\\n        _updatePurchasingState(_amount, soldTokenAmount);\\n\\n        emit BuyTokenByTokenWithPermit(_offerToken, _beneficiary, _amount, _maxAmount, soldTokenAmount);\\n    }\\n\\n    function buyTokenByETHWithPermission(\\n        address _beneficiary,\\n        uint _maxAmount,\\n        bytes32[] memory proof\\n    ) external payable whenNotPaused nonReentrant {\\n        uint _amount = msg.value;\\n        \\n        OfferedCurrency memory offeredCurrency = offeredCurrencies[address(0)];\\n        require(offeredCurrency.rate != 0, \\\"PresalePool::Offer currency rate is invalid!\\\");\\n        require(_validPurchase(), \\\"PresalePool::Pool is ended!\\\");\\n        require(_verifyWhitelist(proof, msg.sender, _maxAmount), \\\"PresalePool::Not in whitelist!\\\");\\n\\n        _preValidatePurchase(_beneficiary, _amount);\\n\\n        uint soldTokenAmount = _getSoldTokensByOfferedCurrency(address(0), _amount);\\n        require(soldTokenAmount + userPurchased[msg.sender] <= _maxAmount, \\\"PresalePool::Purchase amount exceeds max amount!\\\");\\n\\n        _forwardFunds(_amount);\\n        _deliverTokens(_beneficiary, soldTokenAmount);\\n        _updatePurchasingState(_amount, soldTokenAmount);\\n\\n        emit BuyTokenByETHWithPermit(_beneficiary, _amount, _maxAmount, soldTokenAmount);\\n    }\\n\\n    function isFinalized() public view returns(bool) {\\n        return block.timestamp > closeTime;\\n    }\\n\\n    function refundRemainingTokens(address _wallet, uint _amount) external onlyOwner {\\n        require(isFinalized(), \\\"PresalePool::Pool not ended yet!\\\");\\n        require(IERC20(soldToken).balanceOf(address(this)) >= _amount, \\\"PresalePool::Refund amount exceeds pool balance!\\\");\\n        _deliverTokens(_wallet, _amount);\\n        emit SoldTokenRefunded(_wallet, _amount);\\n    }\\n\\n    function _updatePurchasingState(uint256 _raiseAmount, uint256 _soldAmount)\\n    internal\\n    {\\n        totalRaised = totalRaised + _raiseAmount;\\n        totalSold = totalSold + _soldAmount;\\n    }\\n\\n    function _deliverTokens(address _beneficiary, uint _amount) internal {\\n        TransferHelper.safeTransfer(address(soldToken), _beneficiary, _amount);\\n        userPurchased[msg.sender] += _amount;\\n    }\\n\\n    function _forwardFundTransfer(address _token, uint _value) internal {\\n        TransferHelper.safeTransferFrom(_token, msg.sender, fundingWallet, _value);\\n    }\\n\\n    function _forwardFunds(uint256 _value) internal {\\n        (bool success, ) = payable(fundingWallet).call{value: _value}(\\\"\\\");\\n        require(success, \\\"POOL::WALLET_TRANSFER_FAILED\\\");\\n    }\\n\\n\\n    function _preValidatePurchase(address _beneficiary, uint _amount) internal pure {\\n        require(_beneficiary != address(0), \\\"PresalePool::Beneficiary is not valid!\\\");\\n        require(_amount != 0, \\\"PresalePool::Invalid Token amount\\\");\\n    }\\n\\n    function _verifyAllowance(address _user, address _token, uint _amount) internal view returns(bool) {\\n        uint allowance = IERC20(_token).allowance(_user, address(this));\\n        return allowance >= _amount;\\n    }\\n\\n    function _validPurchase() internal view returns(bool) {\\n        bool withinPerioid = block.timestamp >= openTime && block.timestamp <= closeTime;\\n        return withinPerioid;\\n    }\\n    \\n    function _getSoldTokensByOfferedCurrency(address _token, uint _amount) internal view returns(uint) {\\n        OfferedCurrency memory offeredCurrency = offeredCurrencies[_token];\\n        return _amount * offeredCurrency.rate / (10 ** offeredCurrency.decimals);      \\n    }\\n}\\n\",\"keccak256\":\"0x681761430727873fa7f080f11ccc63e5a0141d0db2262cccaf8e16a46e1b5766\",\"license\":\"MIT\"},\"contracts/tokens/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612519806100206000396000f3fe6080604052600436106101845760003560e01c8063715018a6116100d6578063c1b7552f1161007f578063ebf0c71711610059578063ebf0c717146103da578063f2fde38b146103ef578063f60ba3381461040f5761018e565b8063c1b7552f14610390578063c45a0155146103b0578063c5c4744c146103c55761018e565b80638fac9107116100b05780638fac9107146103465780639106d7ba14610366578063b42568881461037b5761018e565b8063715018a6146103075780638d4e40831461031c5780638da5cb5b146103315761018e565b80635c975abb11610138578063690d0a8a11610112578063690d0a8a146102b45780636ae291cf146102d45780636ea5e968146102e75761018e565b80635c975abb14610268578063627749e61461028a5780636769d1f91461029f5761018e565b80633c4b40b8116101695780633c4b40b8146101f8578063537800cc1461021a5780635a3a85cb1461023a5761018e565b80632ee58943146101a05780633be3a3f5146101d65761018e565b3661018e57600080fd5b34801561019a57600080fd5b50600080fd5b3480156101ac57600080fd5b506101c06101bb366004611a47565b61042f565b6040516101cd9190611d23565b60405180910390f35b3480156101e257600080fd5b506101f66101f1366004611ba1565b610442565b005b34801561020457600080fd5b5061020d6104dc565b6040516101cd9190611cad565b34801561022657600080fd5b506101f6610235366004611ba1565b6104eb565b34801561024657600080fd5b5061025a610255366004611a47565b61055f565b6040516101cd929190611c63565b34801561027457600080fd5b5061027d610579565b6040516101cd9190611d18565b34801561029657600080fd5b506101c0610582565b3480156102ab57600080fd5b5061020d610589565b3480156102c057600080fd5b506101f66102cf366004611b4f565b610598565b6101f66102e2366004611afa565b610624565b3480156102f357600080fd5b506101f6610302366004611bb9565b610802565b34801561031357600080fd5b506101f6610a42565b34801561032857600080fd5b5061027d610a8d565b34801561033d57600080fd5b5061020d610a96565b34801561035257600080fd5b506101f6610361366004611ad1565b610aa5565b34801561037257600080fd5b506101c0610c0e565b34801561038757600080fd5b506101c0610c15565b34801561039c57600080fd5b506101f66103ab366004611a61565b610c1c565b3480156103bc57600080fd5b5061020d610dfd565b3480156103d157600080fd5b506101c0610e0d565b3480156103e657600080fd5b506101c0610e14565b3480156103fb57600080fd5b506101f661040a366004611a47565b610e1a565b34801561041b57600080fd5b506101f661042a366004611ba1565b610e8b565b6101066020526000908152604090205481565b61044a610efc565b6001600160a01b031661045b610a96565b6001600160a01b03161461048a5760405162461bcd60e51b8152600401610481906120f5565b60405180910390fd5b428110156104aa5760405162461bcd60e51b815260040161048190611f70565b6101028190556040517f915bfd81dbd055d8da358fc4e8b3765b49c2622a2c9ae16e8ae64ed4b18f956290600090a150565b60ff546001600160a01b031681565b6104f3610efc565b6001600160a01b0316610504610a96565b6001600160a01b03161461052a5760405162461bcd60e51b8152600401610481906120f5565b61053381610f00565b6040517f915bfd81dbd055d8da358fc4e8b3765b49c2622a2c9ae16e8ae64ed4b18f956290600090a150565b610105602052600090815260409020805460019091015482565b609a5460ff1690565b6101025481565b60fe546001600160a01b031681565b6105a0610efc565b6001600160a01b03166105b1610a96565b6001600160a01b0316146105d75760405162461bcd60e51b8152600401610481906120f5565b6001600160a01b03831660009081526101056020526040808220848155600101839055517f915bfd81dbd055d8da358fc4e8b3765b49c2622a2c9ae16e8ae64ed4b18f95629190a1505050565b61062c610579565b156106495760405162461bcd60e51b815260040161048190612004565b6002603654141561066c5760405162461bcd60e51b8152600401610481906122af565b6002603655600080526101056020908152604080518082019091527fa5baec7d73105a3c7298203bb205bbc41b63fa384ae73a6016b890a7ca29ae2d548082527fa5baec7d73105a3c7298203bb205bbc41b63fa384ae73a6016b890a7ca29ae2e549282019290925234916106f35760405162461bcd60e51b815260040161048190611e22565b6106fb610f62565b6107175760405162461bcd60e51b815260040161048190612187565b610722833386610f81565b61073e5760405162461bcd60e51b81526004016104819061221b565b6107488583610fa0565b6000610755600084610fe7565b336000908152610106602052604090205490915085906107759083612331565b11156107935760405162461bcd60e51b815260040161048190611dc5565b61079c83611043565b6107a686826110c4565b6107b08382611104565b856001600160a01b03167fdc1380a52f3058b34a1c12e26e229d2859c5de581a255aa6d0a00c3156b14d0d8487846040516107ed9392919061231b565b60405180910390a25050600160365550505050565b600054610100900460ff168061081b575060005460ff16155b6108375760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015610862576000805460ff1961ff0019909116610100171660011790555b6108d7896040518060400160405280600c81526020017f50726573616c6520506f6f6c00000000000000000000000000000000000000008152506040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525061112e565b6108df61113f565b6108e76111c3565b6108ef61122b565b61010080543373ffffffffffffffffffffffffffffffffffffffff199182161790915560fe805482166001600160a01b038b81169190911790915560ff80549092169088161790556101018590556109478486612331565b6101025560408051808201825284815260208082018581526001600160a01b038b16600090815261010590925292902090518155905160019091015561098c32610e1a565b866001600160a01b031661099e610a96565b6001600160a01b031660ff60009054906101000a90046001600160a01b03166001600160a01b03167f59968bcc678d760e59399355e5a0556b1e6a0bf61f168db4b1577e26c4f4ee8f8c61010060009054906101000a90046001600160a01b03168d888a6101015461010254604051610a1d9796959493929190611d2c565b60405180910390a48015610a37576000805461ff00191690555b505050505050505050565b610a4a610efc565b6001600160a01b0316610a5b610a96565b6001600160a01b031614610a815760405162461bcd60e51b8152600401610481906120f5565b610a8b600061129b565b565b61010254421190565b60cc546001600160a01b031690565b610aad610efc565b6001600160a01b0316610abe610a96565b6001600160a01b031614610ae45760405162461bcd60e51b8152600401610481906120f5565b610aec610a8d565b610b085760405162461bcd60e51b8152600401610481906122e6565b60fe546040517f70a0823100000000000000000000000000000000000000000000000000000000815282916001600160a01b0316906370a0823190610b51903090600401611cad565b60206040518083038186803b158015610b6957600080fd5b505afa158015610b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba19190611c29565b1015610bbf5760405162461bcd60e51b8152600401610481906121be565b610bc982826110c4565b816001600160a01b03167f4c4220bae5bb317fcf61aaa103452cfee8ce69607b280434e82a8206cb63e81f82604051610c029190611d23565b60405180910390a25050565b6101035481565b6101015481565b610c24610579565b15610c415760405162461bcd60e51b815260040161048190612004565b60026036541415610c645760405162461bcd60e51b8152600401610481906122af565b60026036556001600160a01b038516600090815261010560209081526040918290208251808401909352805480845260019091015491830191909152610cbc5760405162461bcd60e51b815260040161048190611e22565b610cc4610f62565b610ce05760405162461bcd60e51b815260040161048190612187565b610ceb823385610f81565b610d075760405162461bcd60e51b81526004016104819061221b565b610d123387866112fa565b610d2e5760405162461bcd60e51b815260040161048190611d68565b610d388585610fa0565b6000610d448786610fe7565b33600090815261010660205260409020549091508490610d649083612331565b1115610d825760405162461bcd60e51b815260040161048190611dc5565b610d8c8786611387565b610d9686826110c4565b610da08582611104565b856001600160a01b0316876001600160a01b03167fab049ba217ad5babee969d245ffef71ebe6f5523b60e1812da609b095769b534878785604051610de79392919061231b565b60405180910390a3505060016036555050505050565b610100546001600160a01b031681565b6101045481565b60355481565b610e22610efc565b6001600160a01b0316610e33610a96565b6001600160a01b031614610e595760405162461bcd60e51b8152600401610481906120f5565b6001600160a01b038116610e7f5760405162461bcd60e51b815260040161048190611e7f565b610e888161129b565b50565b610e93610efc565b6001600160a01b0316610ea4610a96565b6001600160a01b031614610eca5760405162461bcd60e51b8152600401610481906120f5565b6101018190556040517f915bfd81dbd055d8da358fc4e8b3765b49c2622a2c9ae16e8ae64ed4b18f956290600090a150565b3390565b603554811415610f225760405162461bcd60e51b815260040161048190611fa7565b7fffedc1bc08731cb4600086f7e529596a4e7a0efeb9ae75a1d83855c3890b836d60355482604051610f55929190611c63565b60405180910390a1603555565b600080610101544210158015610f7b5750610102544211155b91505090565b6000610f9684610f9185856113a1565b6113d4565b90505b9392505050565b6001600160a01b038216610fc65760405162461bcd60e51b815260040161048190612098565b80610fe35760405162461bcd60e51b81526004016104819061212a565b5050565b6001600160a01b038216600090815261010560209081526040808320815180830190925280548252600101549181018290529061102590600a6123af565b8151611031908561247d565b61103b9190612349565b949350505050565b60ff546040516000916001600160a01b031690839061106190611caa565b60006040518083038185875af1925050503d806000811461109e576040519150601f19603f3d011682016040523d82523d6000602084013e6110a3565b606091505b5050905080610fe35760405162461bcd60e51b815260040161048190611edc565b60fe546110db906001600160a01b031683836113e3565b3360009081526101066020526040812080548392906110fb908490612331565b90915550505050565b81610104546111139190612331565b6101045561010354611126908290612331565b610103555050565b61113882826114e5565b5050603555565b600054610100900460ff1680611158575060005460ff16155b6111745760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff1615801561119f576000805460ff1961ff0019909116610100171660011790555b6111a7611566565b6111af6115d9565b8015610e88576000805461ff001916905550565b600054610100900460ff16806111dc575060005460ff16155b6111f85760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015611223576000805460ff1961ff0019909116610100171660011790555b6111af611649565b600054610100900460ff1680611244575060005460ff16155b6112605760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff1615801561128b576000805460ff1961ff0019909116610100171660011790555b611293611566565b6111af6116c2565b60cc80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080836001600160a01b031663dd62ed3e86306040518363ffffffff1660e01b815260040161132b929190611cc1565b60206040518083038186803b15801561134357600080fd5b505afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b9190611c29565b90921115949350505050565b60ff54610fe390839033906001600160a01b031684611740565b600082826040516020016113b6929190611c41565b60405160208183030381529060405280519060200120905092915050565b6000610f998360355484611845565b600080846001600160a01b031663a9059cbb8585604051602401611408929190611cff565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114569190611c71565b6000604051808303816000865af19150503d8060008114611493576040519150601f19603f3d011682016040523d82523d6000602084013e611498565b606091505b50915091508180156114c25750805115806114c25750808060200190518101906114c29190611b81565b6114de5760405162461bcd60e51b815260040161048190612252565b5050505050565b600054610100900460ff16806114fe575060005460ff16155b61151a5760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015611545576000805460ff1961ff0019909116610100171660011790555b61154f8383611900565b8015611561576000805461ff00191690555b505050565b600054610100900460ff168061157f575060005460ff16155b61159b5760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff161580156111af576000805460ff1961ff0019909116610100171660011790558015610e88576000805461ff001916905550565b600054610100900460ff16806115f2575060005460ff16155b61160e5760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015611639576000805460ff1961ff0019909116610100171660011790555b6111af611644610efc565b61129b565b600054610100900460ff1680611662575060005460ff16155b61167e5760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff161580156116a9576000805460ff1961ff0019909116610100171660011790555b60016036558015610e88576000805461ff001916905550565b600054610100900460ff16806116db575060005460ff16155b6116f75760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015611722576000805460ff1961ff0019909116610100171660011790555b609a805460ff191690558015610e88576000805461ff001916905550565b600080856001600160a01b03166323b872dd86868660405160240161176793929190611cdb565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516117b59190611c71565b6000604051808303816000865af19150503d80600081146117f2576040519150601f19603f3d011682016040523d82523d6000602084013e6117f7565b606091505b50915091508180156118215750805115806118215750808060200190518101906118219190611b81565b61183d5760405162461bcd60e51b815260040161048190611f13565b505050505050565b600081815b85518110156118f557600086828151811061187557634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116118b6578281604051602001611899929190611c63565b6040516020818303038152906040528051906020012092506118e2565b80836040516020016118c9929190611c63565b6040516020818303038152906040528051906020012092505b50806118ed8161249c565b91505061184a565b509092149392505050565b600054610100900460ff1680611919575060005460ff16155b6119355760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015611960576000805460ff1961ff0019909116610100171660011790555b82516020808501919091208351918401919091206001919091556002558015611561576000805461ff0019169055505050565b80356001600160a01b03811681146119aa57600080fd5b919050565b600082601f8301126119bf578081fd5b8135602067ffffffffffffffff808311156119dc576119dc6124cd565b818302604051838282010181811084821117156119fb576119fb6124cd565b60405284815283810192508684018288018501891015611a19578687fd5b8692505b85831015611a3b578035845292840192600192909201918401611a1d565b50979650505050505050565b600060208284031215611a58578081fd5b610f9982611993565b600080600080600060a08688031215611a78578081fd5b611a8186611993565b9450611a8f60208701611993565b93506040860135925060608601359150608086013567ffffffffffffffff811115611ab8578182fd5b611ac4888289016119af565b9150509295509295909350565b60008060408385031215611ae3578182fd5b611aec83611993565b946020939093013593505050565b600080600060608486031215611b0e578283fd5b611b1784611993565b925060208401359150604084013567ffffffffffffffff811115611b39578182fd5b611b45868287016119af565b9150509250925092565b600080600060608486031215611b63578283fd5b611b6c84611993565b95602085013595506040909401359392505050565b600060208284031215611b92578081fd5b81518015158114610f99578182fd5b600060208284031215611bb2578081fd5b5035919050565b600080600080600080600080610100898b031215611bd5578283fd5b88359750611be560208a01611993565b9650611bf360408a01611993565b9550611c0160608a01611993565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b600060208284031215611c3a578081fd5b5051919050565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b918252602082015260400190565b60008251815b81811015611c915760208186018101518583015201611c77565b81811115611c9f5782828501525b509190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9687526001600160a01b0395861660208801529390941660408601526060850191909152608084015260a083019190915260c082015260e00190565b60208082526033908201527f50726573616c65506f6f6c3a3a416c6c6f77616e636520666f72206f6666657260408201527f656420746f6b656e20756e726561636865642100000000000000000000000000606082015260800190565b60208082526030908201527f50726573616c65506f6f6c3a3a507572636861736520616d6f756e742065786360408201527f65656473206d617820616d6f756e742100000000000000000000000000000000606082015260800190565b6020808252602c908201527f50726573616c65506f6f6c3a3a4f666665722063757272656e6379207261746560408201527f20697320696e76616c6964210000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f504f4f4c3a3a57414c4c45545f5452414e534645525f4641494c454400000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526019908201527f50726573616c65506f6f6c3a3a494e56414c49445f54494d4500000000000000604082015260600190565b6020808252602e908201527f50726573616c6557686974656c6973743a3a4e6577204d65726b6c6520526f6f60408201527f74206973207468652073616d6521000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526026908201527f50726573616c65506f6f6c3a3a42656e6566696369617279206973206e6f742060408201527f76616c6964210000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f50726573616c65506f6f6c3a3a496e76616c696420546f6b656e20616d6f756e60408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f50726573616c65506f6f6c3a3a506f6f6c20697320656e646564210000000000604082015260600190565b60208082526030908201527f50726573616c65506f6f6c3a3a526566756e6420616d6f756e7420657863656560408201527f647320706f6f6c2062616c616e63652100000000000000000000000000000000606082015260800190565b6020808252601e908201527f50726573616c65506f6f6c3a3a4e6f7420696e2077686974656c697374210000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201527f616e73666572206661696c656400000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f50726573616c65506f6f6c3a3a506f6f6c206e6f7420656e6465642079657421604082015260600190565b9283526020830191909152604082015260600190565b60008219821115612344576123446124b7565b500190565b60008261236457634e487b7160e01b81526012600452602481fd5b500490565b80825b600180861161237b57506123a6565b81870482111561238d5761238d6124b7565b8086161561239a57918102915b9490941c93800261236c565b94509492505050565b6000610f9960001984846000826123c857506001610f99565b816123d557506000610f99565b81600181146123eb57600281146123f557612422565b6001915050610f99565b60ff841115612406576124066124b7565b6001841b91508482111561241c5761241c6124b7565b50610f99565b5060208310610133831016604e8410600b8410161715612455575081810a83811115612450576124506124b7565b610f99565b6124628484846001612369565b808604821115612474576124746124b7565b02949350505050565b6000816000190483118215151615612497576124976124b7565b500290565b60006000198214156124b0576124b06124b7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220967a7084c3da62cfe09067c794b0b268b515f0581484f6e80788142f8fd366dc64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106101845760003560e01c8063715018a6116100d6578063c1b7552f1161007f578063ebf0c71711610059578063ebf0c717146103da578063f2fde38b146103ef578063f60ba3381461040f5761018e565b8063c1b7552f14610390578063c45a0155146103b0578063c5c4744c146103c55761018e565b80638fac9107116100b05780638fac9107146103465780639106d7ba14610366578063b42568881461037b5761018e565b8063715018a6146103075780638d4e40831461031c5780638da5cb5b146103315761018e565b80635c975abb11610138578063690d0a8a11610112578063690d0a8a146102b45780636ae291cf146102d45780636ea5e968146102e75761018e565b80635c975abb14610268578063627749e61461028a5780636769d1f91461029f5761018e565b80633c4b40b8116101695780633c4b40b8146101f8578063537800cc1461021a5780635a3a85cb1461023a5761018e565b80632ee58943146101a05780633be3a3f5146101d65761018e565b3661018e57600080fd5b34801561019a57600080fd5b50600080fd5b3480156101ac57600080fd5b506101c06101bb366004611a47565b61042f565b6040516101cd9190611d23565b60405180910390f35b3480156101e257600080fd5b506101f66101f1366004611ba1565b610442565b005b34801561020457600080fd5b5061020d6104dc565b6040516101cd9190611cad565b34801561022657600080fd5b506101f6610235366004611ba1565b6104eb565b34801561024657600080fd5b5061025a610255366004611a47565b61055f565b6040516101cd929190611c63565b34801561027457600080fd5b5061027d610579565b6040516101cd9190611d18565b34801561029657600080fd5b506101c0610582565b3480156102ab57600080fd5b5061020d610589565b3480156102c057600080fd5b506101f66102cf366004611b4f565b610598565b6101f66102e2366004611afa565b610624565b3480156102f357600080fd5b506101f6610302366004611bb9565b610802565b34801561031357600080fd5b506101f6610a42565b34801561032857600080fd5b5061027d610a8d565b34801561033d57600080fd5b5061020d610a96565b34801561035257600080fd5b506101f6610361366004611ad1565b610aa5565b34801561037257600080fd5b506101c0610c0e565b34801561038757600080fd5b506101c0610c15565b34801561039c57600080fd5b506101f66103ab366004611a61565b610c1c565b3480156103bc57600080fd5b5061020d610dfd565b3480156103d157600080fd5b506101c0610e0d565b3480156103e657600080fd5b506101c0610e14565b3480156103fb57600080fd5b506101f661040a366004611a47565b610e1a565b34801561041b57600080fd5b506101f661042a366004611ba1565b610e8b565b6101066020526000908152604090205481565b61044a610efc565b6001600160a01b031661045b610a96565b6001600160a01b03161461048a5760405162461bcd60e51b8152600401610481906120f5565b60405180910390fd5b428110156104aa5760405162461bcd60e51b815260040161048190611f70565b6101028190556040517f915bfd81dbd055d8da358fc4e8b3765b49c2622a2c9ae16e8ae64ed4b18f956290600090a150565b60ff546001600160a01b031681565b6104f3610efc565b6001600160a01b0316610504610a96565b6001600160a01b03161461052a5760405162461bcd60e51b8152600401610481906120f5565b61053381610f00565b6040517f915bfd81dbd055d8da358fc4e8b3765b49c2622a2c9ae16e8ae64ed4b18f956290600090a150565b610105602052600090815260409020805460019091015482565b609a5460ff1690565b6101025481565b60fe546001600160a01b031681565b6105a0610efc565b6001600160a01b03166105b1610a96565b6001600160a01b0316146105d75760405162461bcd60e51b8152600401610481906120f5565b6001600160a01b03831660009081526101056020526040808220848155600101839055517f915bfd81dbd055d8da358fc4e8b3765b49c2622a2c9ae16e8ae64ed4b18f95629190a1505050565b61062c610579565b156106495760405162461bcd60e51b815260040161048190612004565b6002603654141561066c5760405162461bcd60e51b8152600401610481906122af565b6002603655600080526101056020908152604080518082019091527fa5baec7d73105a3c7298203bb205bbc41b63fa384ae73a6016b890a7ca29ae2d548082527fa5baec7d73105a3c7298203bb205bbc41b63fa384ae73a6016b890a7ca29ae2e549282019290925234916106f35760405162461bcd60e51b815260040161048190611e22565b6106fb610f62565b6107175760405162461bcd60e51b815260040161048190612187565b610722833386610f81565b61073e5760405162461bcd60e51b81526004016104819061221b565b6107488583610fa0565b6000610755600084610fe7565b336000908152610106602052604090205490915085906107759083612331565b11156107935760405162461bcd60e51b815260040161048190611dc5565b61079c83611043565b6107a686826110c4565b6107b08382611104565b856001600160a01b03167fdc1380a52f3058b34a1c12e26e229d2859c5de581a255aa6d0a00c3156b14d0d8487846040516107ed9392919061231b565b60405180910390a25050600160365550505050565b600054610100900460ff168061081b575060005460ff16155b6108375760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015610862576000805460ff1961ff0019909116610100171660011790555b6108d7896040518060400160405280600c81526020017f50726573616c6520506f6f6c00000000000000000000000000000000000000008152506040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525061112e565b6108df61113f565b6108e76111c3565b6108ef61122b565b61010080543373ffffffffffffffffffffffffffffffffffffffff199182161790915560fe805482166001600160a01b038b81169190911790915560ff80549092169088161790556101018590556109478486612331565b6101025560408051808201825284815260208082018581526001600160a01b038b16600090815261010590925292902090518155905160019091015561098c32610e1a565b866001600160a01b031661099e610a96565b6001600160a01b031660ff60009054906101000a90046001600160a01b03166001600160a01b03167f59968bcc678d760e59399355e5a0556b1e6a0bf61f168db4b1577e26c4f4ee8f8c61010060009054906101000a90046001600160a01b03168d888a6101015461010254604051610a1d9796959493929190611d2c565b60405180910390a48015610a37576000805461ff00191690555b505050505050505050565b610a4a610efc565b6001600160a01b0316610a5b610a96565b6001600160a01b031614610a815760405162461bcd60e51b8152600401610481906120f5565b610a8b600061129b565b565b61010254421190565b60cc546001600160a01b031690565b610aad610efc565b6001600160a01b0316610abe610a96565b6001600160a01b031614610ae45760405162461bcd60e51b8152600401610481906120f5565b610aec610a8d565b610b085760405162461bcd60e51b8152600401610481906122e6565b60fe546040517f70a0823100000000000000000000000000000000000000000000000000000000815282916001600160a01b0316906370a0823190610b51903090600401611cad565b60206040518083038186803b158015610b6957600080fd5b505afa158015610b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba19190611c29565b1015610bbf5760405162461bcd60e51b8152600401610481906121be565b610bc982826110c4565b816001600160a01b03167f4c4220bae5bb317fcf61aaa103452cfee8ce69607b280434e82a8206cb63e81f82604051610c029190611d23565b60405180910390a25050565b6101035481565b6101015481565b610c24610579565b15610c415760405162461bcd60e51b815260040161048190612004565b60026036541415610c645760405162461bcd60e51b8152600401610481906122af565b60026036556001600160a01b038516600090815261010560209081526040918290208251808401909352805480845260019091015491830191909152610cbc5760405162461bcd60e51b815260040161048190611e22565b610cc4610f62565b610ce05760405162461bcd60e51b815260040161048190612187565b610ceb823385610f81565b610d075760405162461bcd60e51b81526004016104819061221b565b610d123387866112fa565b610d2e5760405162461bcd60e51b815260040161048190611d68565b610d388585610fa0565b6000610d448786610fe7565b33600090815261010660205260409020549091508490610d649083612331565b1115610d825760405162461bcd60e51b815260040161048190611dc5565b610d8c8786611387565b610d9686826110c4565b610da08582611104565b856001600160a01b0316876001600160a01b03167fab049ba217ad5babee969d245ffef71ebe6f5523b60e1812da609b095769b534878785604051610de79392919061231b565b60405180910390a3505060016036555050505050565b610100546001600160a01b031681565b6101045481565b60355481565b610e22610efc565b6001600160a01b0316610e33610a96565b6001600160a01b031614610e595760405162461bcd60e51b8152600401610481906120f5565b6001600160a01b038116610e7f5760405162461bcd60e51b815260040161048190611e7f565b610e888161129b565b50565b610e93610efc565b6001600160a01b0316610ea4610a96565b6001600160a01b031614610eca5760405162461bcd60e51b8152600401610481906120f5565b6101018190556040517f915bfd81dbd055d8da358fc4e8b3765b49c2622a2c9ae16e8ae64ed4b18f956290600090a150565b3390565b603554811415610f225760405162461bcd60e51b815260040161048190611fa7565b7fffedc1bc08731cb4600086f7e529596a4e7a0efeb9ae75a1d83855c3890b836d60355482604051610f55929190611c63565b60405180910390a1603555565b600080610101544210158015610f7b5750610102544211155b91505090565b6000610f9684610f9185856113a1565b6113d4565b90505b9392505050565b6001600160a01b038216610fc65760405162461bcd60e51b815260040161048190612098565b80610fe35760405162461bcd60e51b81526004016104819061212a565b5050565b6001600160a01b038216600090815261010560209081526040808320815180830190925280548252600101549181018290529061102590600a6123af565b8151611031908561247d565b61103b9190612349565b949350505050565b60ff546040516000916001600160a01b031690839061106190611caa565b60006040518083038185875af1925050503d806000811461109e576040519150601f19603f3d011682016040523d82523d6000602084013e6110a3565b606091505b5050905080610fe35760405162461bcd60e51b815260040161048190611edc565b60fe546110db906001600160a01b031683836113e3565b3360009081526101066020526040812080548392906110fb908490612331565b90915550505050565b81610104546111139190612331565b6101045561010354611126908290612331565b610103555050565b61113882826114e5565b5050603555565b600054610100900460ff1680611158575060005460ff16155b6111745760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff1615801561119f576000805460ff1961ff0019909116610100171660011790555b6111a7611566565b6111af6115d9565b8015610e88576000805461ff001916905550565b600054610100900460ff16806111dc575060005460ff16155b6111f85760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015611223576000805460ff1961ff0019909116610100171660011790555b6111af611649565b600054610100900460ff1680611244575060005460ff16155b6112605760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff1615801561128b576000805460ff1961ff0019909116610100171660011790555b611293611566565b6111af6116c2565b60cc80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080836001600160a01b031663dd62ed3e86306040518363ffffffff1660e01b815260040161132b929190611cc1565b60206040518083038186803b15801561134357600080fd5b505afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b9190611c29565b90921115949350505050565b60ff54610fe390839033906001600160a01b031684611740565b600082826040516020016113b6929190611c41565b60405160208183030381529060405280519060200120905092915050565b6000610f998360355484611845565b600080846001600160a01b031663a9059cbb8585604051602401611408929190611cff565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114569190611c71565b6000604051808303816000865af19150503d8060008114611493576040519150601f19603f3d011682016040523d82523d6000602084013e611498565b606091505b50915091508180156114c25750805115806114c25750808060200190518101906114c29190611b81565b6114de5760405162461bcd60e51b815260040161048190612252565b5050505050565b600054610100900460ff16806114fe575060005460ff16155b61151a5760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015611545576000805460ff1961ff0019909116610100171660011790555b61154f8383611900565b8015611561576000805461ff00191690555b505050565b600054610100900460ff168061157f575060005460ff16155b61159b5760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff161580156111af576000805460ff1961ff0019909116610100171660011790558015610e88576000805461ff001916905550565b600054610100900460ff16806115f2575060005460ff16155b61160e5760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015611639576000805460ff1961ff0019909116610100171660011790555b6111af611644610efc565b61129b565b600054610100900460ff1680611662575060005460ff16155b61167e5760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff161580156116a9576000805460ff1961ff0019909116610100171660011790555b60016036558015610e88576000805461ff001916905550565b600054610100900460ff16806116db575060005460ff16155b6116f75760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015611722576000805460ff1961ff0019909116610100171660011790555b609a805460ff191690558015610e88576000805461ff001916905550565b600080856001600160a01b03166323b872dd86868660405160240161176793929190611cdb565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516117b59190611c71565b6000604051808303816000865af19150503d80600081146117f2576040519150601f19603f3d011682016040523d82523d6000602084013e6117f7565b606091505b50915091508180156118215750805115806118215750808060200190518101906118219190611b81565b61183d5760405162461bcd60e51b815260040161048190611f13565b505050505050565b600081815b85518110156118f557600086828151811061187557634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116118b6578281604051602001611899929190611c63565b6040516020818303038152906040528051906020012092506118e2565b80836040516020016118c9929190611c63565b6040516020818303038152906040528051906020012092505b50806118ed8161249c565b91505061184a565b509092149392505050565b600054610100900460ff1680611919575060005460ff16155b6119355760405162461bcd60e51b81526004016104819061203b565b600054610100900460ff16158015611960576000805460ff1961ff0019909116610100171660011790555b82516020808501919091208351918401919091206001919091556002558015611561576000805461ff0019169055505050565b80356001600160a01b03811681146119aa57600080fd5b919050565b600082601f8301126119bf578081fd5b8135602067ffffffffffffffff808311156119dc576119dc6124cd565b818302604051838282010181811084821117156119fb576119fb6124cd565b60405284815283810192508684018288018501891015611a19578687fd5b8692505b85831015611a3b578035845292840192600192909201918401611a1d565b50979650505050505050565b600060208284031215611a58578081fd5b610f9982611993565b600080600080600060a08688031215611a78578081fd5b611a8186611993565b9450611a8f60208701611993565b93506040860135925060608601359150608086013567ffffffffffffffff811115611ab8578182fd5b611ac4888289016119af565b9150509295509295909350565b60008060408385031215611ae3578182fd5b611aec83611993565b946020939093013593505050565b600080600060608486031215611b0e578283fd5b611b1784611993565b925060208401359150604084013567ffffffffffffffff811115611b39578182fd5b611b45868287016119af565b9150509250925092565b600080600060608486031215611b63578283fd5b611b6c84611993565b95602085013595506040909401359392505050565b600060208284031215611b92578081fd5b81518015158114610f99578182fd5b600060208284031215611bb2578081fd5b5035919050565b600080600080600080600080610100898b031215611bd5578283fd5b88359750611be560208a01611993565b9650611bf360408a01611993565b9550611c0160608a01611993565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b600060208284031215611c3a578081fd5b5051919050565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b918252602082015260400190565b60008251815b81811015611c915760208186018101518583015201611c77565b81811115611c9f5782828501525b509190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9687526001600160a01b0395861660208801529390941660408601526060850191909152608084015260a083019190915260c082015260e00190565b60208082526033908201527f50726573616c65506f6f6c3a3a416c6c6f77616e636520666f72206f6666657260408201527f656420746f6b656e20756e726561636865642100000000000000000000000000606082015260800190565b60208082526030908201527f50726573616c65506f6f6c3a3a507572636861736520616d6f756e742065786360408201527f65656473206d617820616d6f756e742100000000000000000000000000000000606082015260800190565b6020808252602c908201527f50726573616c65506f6f6c3a3a4f666665722063757272656e6379207261746560408201527f20697320696e76616c6964210000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f504f4f4c3a3a57414c4c45545f5452414e534645525f4641494c454400000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526019908201527f50726573616c65506f6f6c3a3a494e56414c49445f54494d4500000000000000604082015260600190565b6020808252602e908201527f50726573616c6557686974656c6973743a3a4e6577204d65726b6c6520526f6f60408201527f74206973207468652073616d6521000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526026908201527f50726573616c65506f6f6c3a3a42656e6566696369617279206973206e6f742060408201527f76616c6964210000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f50726573616c65506f6f6c3a3a496e76616c696420546f6b656e20616d6f756e60408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f50726573616c65506f6f6c3a3a506f6f6c20697320656e646564210000000000604082015260600190565b60208082526030908201527f50726573616c65506f6f6c3a3a526566756e6420616d6f756e7420657863656560408201527f647320706f6f6c2062616c616e63652100000000000000000000000000000000606082015260800190565b6020808252601e908201527f50726573616c65506f6f6c3a3a4e6f7420696e2077686974656c697374210000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201527f616e73666572206661696c656400000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f50726573616c65506f6f6c3a3a506f6f6c206e6f7420656e6465642079657421604082015260600190565b9283526020830191909152604082015260600190565b60008219821115612344576123446124b7565b500190565b60008261236457634e487b7160e01b81526012600452602481fd5b500490565b80825b600180861161237b57506123a6565b81870482111561238d5761238d6124b7565b8086161561239a57918102915b9490941c93800261236c565b94509492505050565b6000610f9960001984846000826123c857506001610f99565b816123d557506000610f99565b81600181146123eb57600281146123f557612422565b6001915050610f99565b60ff841115612406576124066124b7565b6001841b91508482111561241c5761241c6124b7565b50610f99565b5060208310610133831016604e8410600b8410161715612455575081810a83811115612450576124506124b7565b610f99565b6124628484846001612369565b808604821115612474576124746124b7565b02949350505050565b6000816000190483118215151615612497576124976124b7565b500290565b60006000198214156124b0576124b06124b7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220967a7084c3da62cfe09067c794b0b268b515f0581484f6e80788142f8fd366dc64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCloseTime(uint256)": {
        "params": {
          "_closeTime": "Value in uint256 determine when we stop user to by tokens"
        }
      },
      "setOpenTime(uint256)": {
        "params": {
          "_openTime": "Value in uint256 determine when we allow user to by tokens"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setCloseTime(uint256)": {
        "notice": "Owner can set the close time (time in seconds). User can buy before close time."
      },
      "setOpenTime(uint256)": {
        "notice": "Owner can set the open time (time in seconds). User can buy after open time."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 761,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 763,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 900,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1013,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "root",
        "offset": 0,
        "slot": "53",
        "type": "t_bytes32"
      },
      {
        "astId": 297,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "_status",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "__gap",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 384,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 191,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "_paused",
        "offset": 0,
        "slot": "154",
        "type": "t_bool"
      },
      {
        "astId": 282,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "_owner",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1658,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "soldToken",
        "offset": 0,
        "slot": "254",
        "type": "t_contract(IERC20)3153"
      },
      {
        "astId": 1660,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "fundingWallet",
        "offset": 0,
        "slot": "255",
        "type": "t_address"
      },
      {
        "astId": 1662,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "factory",
        "offset": 0,
        "slot": "256",
        "type": "t_address"
      },
      {
        "astId": 1664,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "openTime",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 1666,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "closeTime",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 1668,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "totalSold",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 1670,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "totalRaised",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 1675,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "offeredCurrencies",
        "offset": 0,
        "slot": "261",
        "type": "t_mapping(t_address,t_struct(OfferedCurrency)1655_storage)"
      },
      {
        "astId": 1679,
        "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
        "label": "userPurchased",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3153": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(OfferedCurrency)1655_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PresalePool.OfferedCurrency)",
        "numberOfBytes": "32",
        "value": "t_struct(OfferedCurrency)1655_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(OfferedCurrency)1655_storage": {
        "encoding": "inplace",
        "label": "struct PresalePool.OfferedCurrency",
        "members": [
          {
            "astId": 1652,
            "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1654,
            "contract": "contracts/presale-pool/PresalePool.sol:PresalePool",
            "label": "decimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}